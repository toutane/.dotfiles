#!/bin/zsh
# Determine git branch name.
function parse_git_branch (){
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Determine the branch/state information for this git repository.
function set_git_branch () {
	branch=$(parse_git_branch)
	BRANCH="%F{magenta}${branch}%f"
}

# Determine if the remote repository has changed.
function compare_with_remote() {
	UPSTREAM=${1:-'@{u}'}
	LOCAL=$(git rev-parse @)
	REMOTE=$(git rev-parse "$UPSTREAM")
	BASE=$(git merge-base @ "$UPSTREAM")
	STATE=""

	if [ $LOCAL = $REMOTE ]; then
		#echo "Up-to-date"
		STATE=""
	elif [ $LOCAL = $BASE ]; then
		#echo "Need to pull"
		STATE=" ⇣ "
	elif [ $REMOTE = $BASE ]; then
		#echo "Need to push"
		STATE=" ⇡ "
	else
		#echo "Diverged"
		echo "2"
	fi
}

# Determine if repo is dirty.
function check_git_dirty() {
	if [ ! -z "$(command git status --porcelain -u${untracked_git_mode})" ]; then
		DIRTY_STATE="* "
	else
		DIRTY_STATE=""
	fi
}

# Set the full zsh prompt.
function set_zsh_prompt () {
	(git rev-parse 2> /dev/null)
	local is_inside_git_repo=$?
	if [[ $is_inside_git_repo -eq 0 ]]; then
		set_git_branch
		git show &> /dev/null
		if [ $? -ne 128 ]; then
			compare_with_remote
		fi
		check_git_dirty
		PS1="%F{green}%n@%m%f:%F{blue}%~%f${BRANCH}%F{magenta}${DIRTY_STATE}%f%F{yellow}${STATE}%f$ "
	else
		PS1="%F{green}%n@%m%f:%F{blue}%~%f$ "
	fi
}

precmd() {
	set_zsh_prompt
}
